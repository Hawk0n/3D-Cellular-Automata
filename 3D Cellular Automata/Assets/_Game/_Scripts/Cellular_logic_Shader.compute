// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWBuffer<int> currentCellBuffer; // 0 is false 1 is true
RWBuffer<int> nextCellBuffer;    // 0 is false 1 is true
float4 boardDimensions;
int ruleToUse;

bool Rules(int rule, int index, int cellMap, int aliveNeighbourCount)
{
    switch (rule)
    {
        case 1:
            if(aliveNeighbourCount <= 7 && currentCellBuffer[index] == 1) {
                // Debug.Log("Died from underpopulation");
                return false;
            }
            else if(aliveNeighbourCount >= 15 && currentCellBuffer[index] == 1) {
                // Debug.Log("Died from overpopulation");
                return false;
            }
            else if(aliveNeighbourCount == 8 && currentCellBuffer[index] == 0) {
                // Debug.Log("Born");
                return true;
            } 
            else if(currentCellBuffer[index] == 1) {
                // Debug.Log("Survived");
                return true;
            }
            return false;

        default:
            return false;
    }
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= (uint)boardDimensions.x || id.y >= (uint)boardDimensions.y || id.z >= (uint)boardDimensions.z)
        return;

    int index = (id.z * boardDimensions.x * boardDimensions.y) + (id.y * boardDimensions.x) + id.x;
    int currentCell = currentCellBuffer[index];

    // Find all surrounding indexes
    int3 surroundingIndexes[26] = 
    {
        // Bottom layer
        int3(id.x+0, id.y-1, id.z+1), // 1 forward
        int3(id.x+1, id.y-1, id.z+1), // 2 forward right
        int3(id.x+1, id.y-1, id.z+0), // 3 right
        int3(id.x+1, id.y-1, id.z-1), // 4 back right
        int3(id.x-0, id.y-1, id.z-1), // 5 back
        int3(id.x-1, id.y-1, id.z-1), // 6 back left
        int3(id.x-1, id.y-1, id.z-0), // 7 left
        int3(id.x-1, id.y-1, id.z+1), // 8 forward left
        int3(id.x+0, id.y-1, id.z+0), // 9 underneath
        
        // Middle layer
        int3(id.x+0, id.y+0, id.z+1), // 10 forward
        int3(id.x+1, id.y+0, id.z+1), // 11 forward right
        int3(id.x+1, id.y+0, id.z+0), // 12 right
        int3(id.x+1, id.y+0, id.z-1), // 13 back right
        int3(id.x-0, id.y+0, id.z-1), // 14 back
        int3(id.x-1, id.y+0, id.z-1), // 15 back left
        int3(id.x-1, id.y+0, id.z-0), // 16 left
        int3(id.x-1, id.y+0, id.z+1), // 17 forward left

        // Top layer
        int3(id.x+0, id.y+1, id.z+1), // 18 forward
        int3(id.x+1, id.y+1, id.z+1), // 19 forward right
        int3(id.x+1, id.y+1, id.z+0), // 20 right
        int3(id.x+1, id.y+1, id.z-1), // 21 back right
        int3(id.x-0, id.y+1, id.z-1), // 22 back
        int3(id.x-1, id.y+1, id.z-1), // 23 back left
        int3(id.x-1, id.y+1, id.z-0), // 24 left
        int3(id.x-1, id.y+1, id.z+1), // 25 forward left
        int3(id.x+0, id.y+1, id.z+0), // 26 underneath
    };

    int cellMap = 0, aliveNeighbourCount = 0;
    for(int k = 0; k < 26; k++)
    {
        if(surroundingIndexes[k].x <= boardDimensions.x && surroundingIndexes[k].y <= boardDimensions.y 
                                                        && surroundingIndexes[k].z <= boardDimensions.z)
        {
            int surroundingIndex = (surroundingIndexes[k].z * boardDimensions.x * boardDimensions.y) + (surroundingIndexes[k].y * boardDimensions.x) + surroundingIndexes[k].x;
            if(currentCellBuffer[surroundingIndex] == 1)
            {
                aliveNeighbourCount++;
                cellMap += (1 << k);
            }
        }
    }

    currentCell = Rules(ruleToUse, index, cellMap, aliveNeighbourCount) ? 1 : 0;
    nextCellBuffer[index] = currentCell;
}
